Directory structure:
└── itznishantthapa-esewa-intregration-react/
    ├── README.md
    ├── App.js
    ├── app.json
    ├── eSewa Django.txt
    ├── index.js
    ├── package.json
    ├── assets/
    └── src/
        ├── navigation/
        │   └── AppNavigator.js
        ├── screens/
        │   ├── HomeScreen.js
        │   ├── PaymentFailureScreen.js
        │   ├── PaymentScreen.js
        │   ├── PaymentSuccessScreen.js
        │   └── ProductDetailsScreen.js
        └── utils/
            └── eSewaUtils.js

================================================
File: README.md
================================================
# eSewa Payment Integration Demo

This is a simple React Native Expo app that demonstrates how to integrate eSewa payment gateway in a mobile application.

## Features

- Browse sample products
- View product details
- Process payments using eSewa
- Verify payment status
- Handle payment success and failure scenarios

## Getting Started

### Prerequisites

- Node.js (v14 or later)
- Yarn or npm
- Expo CLI
- Android Studio (for Android development)
- Xcode (for iOS development, macOS only)

### Installation

1. Clone the repository
2. Install dependencies:
   ```
   yarn install
   ```
 
3. Start the development server:
   ```
   npx expo start
   ```
  

## eSewa Integration

This app demonstrates the integration of eSewa payment gateway using the following approach:

1. **Generate HMAC Signature**: Create a signature using HMAC-SHA256 algorithm with the required parameters.
2. **Create Payment Form**: Generate an HTML form with all the necessary parameters for eSewa payment.
3. **WebView Integration**: Use React Native WebView to load the payment form and handle redirects.
4. **Verify Payment**: Check payment status using eSewa's status check API.
5. **Handle Response**: Process the response from eSewa and verify the signature.

### Important Notes on Signature Generation

The signature generation is a critical part of the eSewa integration. The signature is created using the HMAC-SHA256 algorithm with the following parameters:

- **Input String Format**: `total_amount=100,transaction_uuid=11-201-13,product_code=EPAYTEST`
- **Secret Key**: `8gBm/:&EnhH.1/q` (for testing environment)
- **Output Format**: Base64 encoded string

If you encounter the error `{"code":"ES104","message":"Invalid payload signature."}`, it means the signature is not being generated correctly. Make sure:

1. The secret key is exactly as provided by eSewa (no extra characters)
2. The input string format is correct
3. The parameters are in the correct order (total_amount, transaction_uuid, product_code)
4. The signature is properly Base64 encoded

### Test Credentials

For testing purposes, you can use the following eSewa credentials:

- eSewa ID: 9806800001/2/3/4/5
- Password: Nepal@123
- MPIN: 1122 (for application only)
- Token: 123456

## Project Structure

```
src/
├── components/       # Reusable UI components
├── navigation/       # Navigation setup
├── screens/          # App screens
│   ├── HomeScreen.js             # Product listing
│   ├── ProductDetailsScreen.js    # Product details
│   ├── PaymentScreen.js          # eSewa payment handling
│   ├── PaymentSuccessScreen.js   # Payment success screen
│   └── PaymentFailureScreen.js   # Payment failure screen
└── utils/            # Utility functions
    └── eSewaUtils.js             # eSewa integration utilities
```

## Troubleshooting

### Invalid Payload Signature Error

If you encounter the "Invalid payload signature" error:

1. Check the secret key - it should be exactly `8gBm/:&EnhH.1/q` for testing
2. Verify the input string format for signature generation
3. Make sure all parameters are correctly formatted
4. Check the console logs for debugging information

### WebView Issues

If the WebView is not loading or redirecting properly:

1. Make sure `javaScriptEnabled` and `domStorageEnabled` are set to `true`
2. Check that the success and failure URLs are correctly set
3. Verify that the WebView can handle the redirects

## eSewa API Documentation

For more information about eSewa integration, visit the official documentation:
[eSewa Developer Portal](https://developer.esewa.com.np/)

## Notes

- This app uses the eSewa UAT (testing) environment.
- For production, you need to change the API URLs and obtain a production merchant code.
- The secret key used in this demo is for testing purposes only.

## License

This project is licensed under the MIT License. 



================================================
File: App.js
================================================
import React, { useEffect } from 'react';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import AppNavigator from './src/navigation/AppNavigator';
import { LogBox } from 'react-native';

// Ignore specific warnings that might be related to WebView
LogBox.ignoreLogs([
  'Non-serializable values were found in the navigation state',
  'WebView has been extracted from react-native core',
]);

export default function App() {
  useEffect(() => {
    console.log('App initialized');
  }, []);

  return (
    <SafeAreaProvider>
      <StatusBar style="auto" />
      <AppNavigator />
    </SafeAreaProvider>
  );
}



================================================
File: app.json
================================================
{
  "expo": {
    "name": "eSewa",
    "slug": "eSewa",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png"
    }
  }
}



================================================
File: eSewa Django.txt
================================================

-------------Prompt for invalid signature------------------------------------------------

Yes after i run this project and try to order , it says this error:
 ```Pretty print (checkbox)
{"code":"ES104","message":"Invalid payload signature."} ```

I think the signature how we generate is not correctly setup according to eSewa how it checks , so we need to work on that; here is a Django file a person has done in python so by reading and understanding how the signature is generated and implemented , we potentially can solve this error . I have provided the Django file in the Text formate read understand the concepts.@eSewa Django.txt 
------------------------------------------------------------------------------------------

Directory structure:
└── hehenischal-django-esewa/
    ├── README.md
    ├── LICENSE
    ├── MANIFEST.in
    ├── setup.py
    ├── esewa/
    │   ├── Exceptions.py
    │   ├── __init__.py
    │   ├── payment.py
    │   ├── signature.py
    │   └── utils.py
    └── esewa_tests/
        ├── __init__.py
        └── test_signature.py
================================================
File: README.md
================================================
# Django-esewa

A simple, developer-friendly package for integrating the eSewa Payment Gateway into Django applications.

## Overview

`django-esewa` was developed by Nischal Lamichhane to simplify eSewa integration for Python/Django developers. It aims to handle common payment gateway tasks like generating HMAC signatures, verifying transactions, and status checks (in future versions).

## Features

- **HMAC Key Generation**: Easily generate the signature required for eSewa requests.
- **Customization**: Configure secret keys, product codes, success URLs, and failure URLs.

### Future Goals

- Transaction status verification.
- Improved documentation for all class methods.

## QuickStart

```bash
pip install django-esewa
```

Note: Ensure you have added necessary settings like `ESEWA_SECRET_KEY`, `ESEWA_SUCCESS_URL`, and `ESEWA_FAILURE_URL` in your `settings.py`.

Even though you can use the `generate_signature` function without creating an object of `EsewaPayment`, if you want to use other features, you need to add `ESEWA_SUCCESS_URL`, `ESEWA_FAILURE_URL` (will fallback to `localhost:8000/success/` & `localhost:8000/failure/`) & `ESEWA_SECRET_KEY` (will fall back to `'8gBm/:&EnhH.1/q'`).

```python
ESEWA_SUCCESS_URL = "localhost:8000/success/"
ESEWA_FAILURE_URL = "localhost:8000/failure/"
ESEWA_SECRET_KEY = "<Custom_key_from_Esewa>"
```
---
## Usage

### Generating HTML Form
 > Views.py
```python 
from esewa import EsewaPayment

def confirm_order(request,id):
    order = Order.objects.get(id=id)
   

    payment = EsewaPayment(
        product_code=order.code,
        success_url="http://yourdomain.com/success/",
        failure_url="http://yourdomain.com/failure/",
        secret_key="your_secret_key"
    )
    payment.create_signature(
        order.amount,
        order.uuid
    )

    context = {
        'form':payment.generate_form()
    }
    return render(request,'order/checkout.html',context)
```
> order/checkout.html
```html
<form action="https://rc-epay.esewa.com.np/api/epay/main/v2/form" method="POST">
    {{form|safe}}
    <button type="submit">Pay with Esewa </button>
</form>
```
---

### Generating a Signature

The `generate_signature` function helps create the HMAC signature required by eSewa for secure transactions.

**Function Signature:**

```python
def generate_signature(
    total_amount: float,
    transaction_uuid: str,
    key: str = "8gBm/:&EnhH.1/q",
    product_code: str = "EPAYTEST"
) -> str:
```

**Example:**

```python
from esewa import generate_signature

# During Development
signature = generate_signature(1000, "123abc")

# In Production
signature = generate_signature(1000, "123abc", "<your_private_key>", "<product_code>")
```
---
### Using the EsewaPayment Class

`EsewaPayment` provides additional configuration options for success and failure URLs.
List of all methods in EsewaPayment:
- `__init__()`
- `create_signature()`
- `generate_form()`
- `get_status()`
- `is_completed()`
- `verify_signature()`
- `log_transaction()`
- `__eq__()`

List of In-development methods:
- `generate_redirect_url()`
- `refund_payment()`
- `simulate_payment()`

---

**Initialization:**

```python
from esewa import EsewaPayment

payment = EsewaPayment(
    product_code="EPAYTEST",
    success_url="http://yourdomain.com/success/",
    failure_url="http://yourdomain.com/failure/",
    secret_key="your_secret_key"
)
```

### Settings

To use custom configurations, add the following keys to your `settings.py`:

```python
# settings.py

ESEWA_SECRET_KEY = "your_secret_key"
ESEWA_SUCCESS_URL = "http://yourdomain.com/success/"
ESEWA_FAILURE_URL = "http://yourdomain.com/failure/"
```

If these settings are missing, the package will use the following defaults:

- `ESEWA_SECRET_KEY`: `"8gBm/:&EnhH.1/q"`
- `ESEWA_SUCCESS_URL`: `"http://localhost:8000/success/"`
- `ESEWA_FAILURE_URL`: `"http://localhost:8000/failure/"`

--- 
## Contributing

### Current To-Do List

- Write documentation for all methods in the `EsewaPayment` class.
- Add refund method

### How to Contribute

1. Fork this repository.
2. Create a feature branch.
3. Commit your changes with clear messages.
4. Submit a pull request (PR) with a detailed description of your changes.

## Credits

`django-esewa` is maintained by Nischal Lamichhane. This package was created as a last-ditch effort to help Python/Django developers integrate eSewa Payment Gateway efficiently.


================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2024 Nischal Lamichhane

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to view
the Software, including the rights to use, modify, and distribute the Software,
provided that any modifications are submitted via a fork and merge request.
Blatant and non-additive copying is not allowed.




================================================
File: MANIFEST.in
================================================
include README.md
include LICENSE



================================================
File: setup.py
================================================
from setuptools import setup, find_packages

setup(
    name="django-esewa",
    version="1.0.3",
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        "Django>=3.0", 
        "requests>=2.25.1",  
        "cryptography>=3.4",
    ],
    description="A Django utility for eSewa signature generation.",
    long_description=open("README.md").read(),
    long_description_content_type="text/markdown",
    author="Nischal Lamichhane",
    author_email="nischallc56@gmail.com",
    url="https://github.com/hehenischal/django-esewa",
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Framework :: Django",
        "Programming Language :: Python :: 3.8",
        "License :: OSI Approved :: MIT License",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ],
    python_requires=">=3.6",
)



================================================
File: esewa/Exceptions.py
================================================
class InvalidSyntaxError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)

class InvalidSignatureError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)

class PaymentError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)

class RefundError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)


================================================
File: esewa/__init__.py
================================================
__version__ = "1.0.3"

from .signature import generate_signature, verify_signature
from .payment import EsewaPayment


================================================
File: esewa/payment.py
================================================
import base64
import requests
from django.conf import settings
import logging
import requests
import json
from .signature import generate_signature

class EsewaPayment:
    '''
    A class to handle eSewa payment processing.

    Attributes:
        secret_key (str): Secret key for HMAC signature generation.
        product_code (str): Your Product Code.
        success_url (str): URL to redirect on successful payment.
        failure_url (str): URL to redirect on failed payment.
        amount (float): The total amount for the transaction.
        uuid (str): A unique identifier for the transaction.
        signature (str): The generated signature.

    Methods:
        __init__(self, product_code, success_url, failure_url, secret_key): Initializes the EsewaPayment class.
        create_signature(self, total_amount, transaction_uuid): Creates a signature for the payment request.
        generate_redirect_url(self): Generates a redirect URL for eSewa payment.
        refund_payment(self): Initiates a refund for a transaction.
        simulate_payment(self): Simulates a payment for testing purposes.
        generate_form(self): Generates a form for eSewa payment.
        get_status(self, dev): Fetches the transaction status from eSewa.
        is_completed(self, dev): Checks if the transaction is completed.
        __eq__(self, value): Compare this EsewaPayment instance with another instance for equality.
        verify_signature(self, response_body_base64): Verifies the signature of an eSewa response.
        log_transaction(self): Logs the transaction details.
    
    Usage:
        payment = EsewaPayment()
        signature = payment.create_signature(100, "11-201-13")
        payload = payment.generate_form()
        status = payment.get_status(dev=True)
        completed = payment.is_completed(dev=True)

    '''
    def __init__(self, product_code="EPAYTEST", success_url=None, failure_url=None, secret_key=None) -> None:
        """
        Initializes the EsewaPayment class with the provided parameters or defaults.

        Args:
            product_code (str): Your Product Code.
            success_url (str): URL to redirect on successful payment.
            failure_url (str): URL to redirect on failed payment.
            secret_key (str): Secret Key for HMAC signature generation.
        
        Returns:
            None
        
        Steps:
            1. Check if the secret_key is provided.
            2. If not, check if ESEWA_SECRET_KEY is set in settings.
            3. If neither is provided, use a default secret key.
            4. Check if the success_url is provided.
            5. If not, check if ESEWA_SUCCESS_URL is set in settings.
            6. If neither is provided, use a default success URL.
            7. Check if the failure_url is provided.
            8. If not, check if ESEWA_FAILURE_URL is set in settings.
            9. If neither is provided, use a default failure URL.
        """
        # Handle secret key
        if secret_key:
            self.secret_key = secret_key
            print("Secret key is provided")
        else:
            logger = logging.getLogger(__name__)
            if not hasattr(settings, 'ESEWA_SECRET_KEY'):
                logger.warning(
                    "Using default secret key for EsewaPayment. "
                    "Please set ESEWA_SECRET_KEY in settings."
                )
            self.secret_key = secret_key or getattr(settings, 'ESEWA_SECRET_KEY', "8gBm/:&EnhH.1/q")
        
        # Handle success URL
        if success_url:
            self.success_url = success_url
            print("Success URL is provided")
        else:
            logger = logging.getLogger(__name__)
            if not hasattr(settings, 'ESEWA_SUCCESS_URL'):
                logger.warning(
                    "Using default success URL for EsewaPayment. "
                    "Please set ESEWA_SUCCESS_URL in settings."
                )
            self.success_url = success_url or getattr(settings, 'ESEWA_SUCCESS_URL', "http://localhost:8000/success/")
        
        # Handle failure URL
        if failure_url:
            self.failure_url = failure_url
            print("Failure URL is provided")
        else:
            logger = logging.getLogger(__name__)
            if not hasattr(settings, 'ESEWA_FAILURE_URL'):
                logger.warning(
                    "Using default failure URL for EsewaPayment. "
                    "Please set ESEWA_FAILURE_URL in settings."
                )
            self.failure_url = failure_url or getattr(settings, 'ESEWA_FAILURE_URL', "http://localhost:8000/failure/")
        self.product_code = product_code


    
    def create_signature(
            self, 
            total_amount: float, 
            transaction_uuid: str
            ) -> str:
        """
        Creates a signature for the payment request.

        Args:
            total_amount (float): The total amount for the transaction.
            transaction_uuid (str): A unique identifier for the transaction.

        Returns:
            str: The generated signature.

        Steps:
            1. Set the amount and UUID attributes.
            2. Generate the signature using the provided parameters.
            3. Return the generated signature.
        """
        self.amount = total_amount
        self.uuid = transaction_uuid
        self.signature = generate_signature(total_amount, transaction_uuid, self.secret_key, self.product_code)
        return self.signature

    
    def generate_redirect_url() -> None:
        pass

    def refund_payment() -> None:
        pass

    def simulate_payment() -> None:
        pass

    def generate_form(self) -> str:
        """
        Generates a form for eSewa payment.

        Args:
            None

        Returns:
            str: A HTML code snippet to create a hidden form with necessary fields.
        
        Steps:
            1. Create a payload dictionary with the required fields.
            2. Initialize an empty string for the form.
            3. Iterate over the payload items and append hidden input fields to the form string.
            4. Return the form string.
        """
        payload = {
            "amount": self.amount,
            "product_delivery_charge": "0",
            "product_service_charge": "0",
            "total_amount": self.amount,
            "tax_amount": 0,
            "product_code": self.product_code,
            "transaction_uuid": self.uuid,
            "success_url": self.success_url,
            "failure_url": self.failure_url,
            "signed_field_names": "total_amount,transaction_uuid,product_code",
            "signature": self.signature
        }

        form= ""
        for key, value in payload.items():
            form += f'<input type="hidden" name="{key}" value="{value}">'
        return form


    def get_status(self, dev: bool) -> str:
        """
        Fetches the transaction status from eSewa.

        Args:
            dev (bool): Use the testing environment if True, production otherwise.

        Returns:
            str: The transaction status.

        Steps:
            1. Constructs the status URL based on the environment (testing or production).
            2. Sends a GET request to the eSewa API.
            3. Checks the response status code.
            4. Parses the JSON response.
            5. Returns the transaction status.
            6. Raises an exception if the request fails.
        """
        status_url_testing = f"https://uat.esewa.com.np/api/epay/transaction/status/?product_code={self.product_code}&total_amount={self.amount}&transaction_uuid={self.uuid}"
        status_url_prod = f"https://epay.esewa.com.np/api/epay/transaction/status/?product_code={self.product_code}&total_amount={self.amount}&transaction_uuid={self.uuid}"

        url = status_url_testing if dev else status_url_prod
        response = requests.get(url)

        if response.status_code != 200:
            raise requests.exceptions.RequestException(f"Error fetching status: {response.text}")

        response_data = response.json()
        return response_data.get("status", "UNKNOWN")


    def is_completed(self, dev: bool) -> bool:
        """
        Checks if the transaction is completed.

        Args:
            dev (bool): Use the testing environment if True, production otherwise.
        Returns:
            bool: True if the transaction is completed, False otherwise.
        Steps:
            1. Calls the get_status method to fetch the transaction status.
            2. Checks if the status is "COMPLETE".
            3. Returns True if completed, False otherwise.
        """
        return self.get_status(dev) == "COMPLETE"

    def __eq__(self, value: object) -> bool:
        """
        Compare this EsewaPayment instance with another instance for equality.

        Args:
            value (object): The object to compare with.

        Returns:
            bool: True if the given object is an instance of EsewaPayment and has the same
                secret_key and product_code as this instance, False otherwise.

        Steps:
            1. Check if the given object is an instance of EsewaPayment.
            2. Compare the secret_key and product_code attributes.
            3. Return True if both attributes match, False otherwise.
        """
        ''''''
        if not isinstance(value, EsewaPayment):
            return False
        return self.secret_key == value.secret_key and self.product_code == value.product_code
        
    def verify_signature(
            self,
        response_body_base64: str,
    ) -> tuple[bool, dict[str, str] | None]:
        """
        Verifies the signature of an eSewa response.
        
        Args:
            response_body_base64 (str): The Base64-encoded response body.
        
        Returns:
            tuple[bool, dict[str, str] | None]: 
                A tuple where the first element is a boolean indicating the validity of the signature,
                and the second element is a dictionary of the decoded response data if the signature is valid, otherwise None.

        Steps:
            1. Decode the Base64-encoded response body.
            2. Parse the JSON response.
            3. Extract the signed field names and received signature.
            4. Construct the message to be signed.
            5. Compare the received signature with the generated signature.
            6. Return a tuple with the validity and response data if valid, otherwise None.
        """
        try:
            response_body_json = base64.b64decode(response_body_base64).decode("utf-8")
            response_data: dict[str, str] = json.loads(response_body_json)
            
            signed_field_names: str = response_data["signed_field_names"]
            received_signature: str = response_data["signature"]
            
            field_names = signed_field_names.split(",")
            message: str = ",".join(
                f"{field_name}={response_data[field_name]}" for field_name in field_names
            )
            is_valid: bool = received_signature == self.signature
            return is_valid, response_data if is_valid else None
        except Exception as e:
            print(f"Error verifying signature: {e}")
            return False, None


    def log_transaction(self):
        """
        Logs the transaction details.

        Args:
            None

        Returns:
            None

        Steps:
            1. Get a logger instance.
            2. Log the transaction details.
        """
        logger = logging.getLogger(__name__)
        logger.info({
            "Transaction UUID": self.uuid,
            "Product Code": self.product_code,
            "Total Amount": self.amount,
            "Signature": self.signature
        })


if __name__ == "__main__":
    payment = EsewaPayment()
    signature = payment.create_signature(100, "11-201-13")
    print(f"Generated Signature: {signature}")
    payload = payment.generate_form()
    print(f"Generated Payload: {payload}")
    status = payment.get_status(dev=True)
    print(f"Transaction Status: {status}")
    completed = payment.is_completed(dev=True)
    print(f"Transaction Completed: {completed}")
    verified, response_data = payment.verify_signature("eyJ0cmFuc2FjdGlvbl9jb2RlIjoiMExENUNFSCIsInN0YXR1cyI6IkNPTVBMRVRFIiwidG90YWxfYW1vdW50IjoiMSwwMDAuMCIsInRyYW5zYWN0aW9uX3V1aWQiOiIyNDA2MTMtMTM0MjMxIiwicHJvZHVjdF9jb2RlIjoiTlAtRVMtQUJISVNIRUstRVBBWSIsInNpZ25lZF9maWVsZF9uYW1lcyI6InRyYW5zYWN0aW9uX2NvZGUsc3RhdHVzLHRvdGFsX2Ftb3VudCx0cmFuc2FjdGlvbl91dWlkLHByb2R1Y3RfY29kZSxzaWduZWRfZmllbGRfbmFtZXMiLCJzaWduYXR1cmUiOiJNcHd5MFRGbEhxcEpqRlVER2ljKzIybWRvZW5JVFQrQ2N6MUxDNjFxTUFjPSJ9 ")





================================================
File: esewa/signature.py
================================================
import hmac
import hashlib
import base64
import json


def generate_signature(
        total_amount: float, 
        transaction_uuid: str, 
        key: str = "8gBm/:&EnhH.1/q", 
        product_code: str = "EPAYTEST"
) -> str:
    """Generates hmac sha256 signature for eSewa payment gateway

    Args:
        total_amount (float): will be processed as a string
        transaction_uuid (str): will be processed as a string
        key (_type_, optional): your private key after buying API. Defaults to "8gBm/:&EnhH.1/q".
        product_code (str, optional): your product code from database. Defaults to "EPAYTEST".

    Raises:
        ValueError: Impropervalues for 'total_amount' and 'transaction_uuid'
        RuntimeError: Failed to generate signature

    Returns:
        str: returns the generated signature
    
    Steps:
        1. Check if total_amount and transaction_uuid are provided.
        2. Create a message string in the format "total_amount=amount,transaction_uuid=uuid,product_code=code".
        3. Encode the key and message to bytes.
        4. Generate HMAC-SHA256 digest using the key and message.
        5. Convert the digest to Base64.
        6. Return the Base64-encoded signature.
    """
    if not total_amount or not transaction_uuid:
        raise ValueError("Both 'total_amount' and 'transaction_uuid' are required.")
    try:
        message = f"total_amount={total_amount},transaction_uuid={transaction_uuid},product_code={product_code}"
        key = key.encode('utf-8')
        message = message.encode('utf-8')

        # Generate HMAC-SHA256 digest
        hmac_sha256 = hmac.new(key, message, hashlib.sha256)
        digest = hmac_sha256.digest()

        # Convert to Base64
        signature = base64.b64encode(digest).decode('utf-8')
        return signature
    except Exception as e:
        raise RuntimeError(f"Failed to generate signature: {e}")

if __name__ == "__main__":
    signature = generate_signature(total_amount=100, transaction_uuid="11-201-13")
    print(f"Generated Signature: {signature}")



def verify_signature(
    response_body_base64: str, 
) -> tuple[bool, dict[str, str] | None]:
    """
    Verifies the signature of an eSewa response.
    
    Args:
        response_body_base64 (str): The Base64-encoded response body.
        secret_key (str): The secret key for signature generation.
    
    Returns:
        bool: True if the signature is valid, False otherwise.
        dict: The response data if the signature is valid, None otherwise.
    
    Raises:
        Exception: If there is an error during verification.
    
    Steps:
        1. Decode the Base64-encoded response body.
        2. Parse the JSON response.
        3. Extract the signed field names and received signature.
        4. Generate the message to be signed.
        5. Generate the HMAC-SHA256 signature using the secret key.
        6. Compare the generated signature with the received signature.
        7. Return True and the response data if valid, False and None otherwise.
    """
    try:
            response_body_json = base64.b64decode(response_body_base64).decode("utf-8")
            response_data: dict[str, str] = json.loads(response_body_json)
            
            signed_field_names: str = response_data["signed_field_names"]
            received_signature: str = response_data["signature"]
            print(response_data)
            field_names = signed_field_names.split(",")
            print(field_names)
            message: str = ",".join(
                f"{field_name}={response_data[field_name]}" for field_name in field_names
            )
            secret="8gBm/:&EnhH.1/q".encode('utf-8')
            message = message.encode('utf-8')
            hmac_sha256 = hmac.new(secret, message, hashlib.sha256)
            digest = hmac_sha256.digest()
            signature = base64.b64encode(digest).decode('utf-8')
            print(signature)
            is_valid: bool = received_signature == signature
            return is_valid, response_data if is_valid else None
    except Exception as e:
            print(f"Error verifying signature: {e}")
            return False, None



if __name__ == "__main__":
    response_body_base64 = "eyJ0cmFuc2FjdGlvbl9jb2RlIjoiMExENUNFSCIsInN0YXR1cyI6IkNPTVBMRVRFIiwidG90YWxfYW1vdW50IjoiMSwwMDAuMCIsInRyYW5zYWN0aW9uX3V1aWQiOiIyNDA2MTMtMTM0MjMxIiwicHJvZHVjdF9jb2RlIjoiTlAtRVMtQUJISVNIRUstRVBBWSIsInNpZ25lZF9maWVsZF9uYW1lcyI6InRyYW5zYWN0aW9uX2NvZGUsc3RhdHVzLHRvdGFsX2Ftb3VudCx0cmFuc2FjdGlvbl91dWlkLHByb2R1Y3RfY29kZSxzaWduZWRfZmllbGRfbmFtZXMiLCJzaWduYXR1cmUiOiJNcHd5MFRGbEhxcEpqRlVER2ljKzIybWRvZW5JVFQrQ2N6MUxDNjFxTUFjPSJ9"

    is_valid,response_data = verify_signature(response_body_base64)
    if is_valid:
        print("Signature is valid.")
        print("Response data:", response_data)
    else:
        print("Invalid signature!", response_data)


================================================
File: esewa/utils.py
================================================



def build_request_payload():
    pass


def parse_response():
    pass




================================================
File: esewa_tests/__init__.py
================================================
__version__ = "1.0.3"

from .test_signature import TestSignature


================================================
File: esewa_tests/test_signature.py
================================================
import unittest
from esewa.signature import generate_signature

class TestEsewaSignature(unittest.TestCase):
    def test_generate_signature_valid(self):
        key = "testkey"
        total_amount = "1000"
        transaction_uuid = "1234abcd"
        product_code = "EPAYTEST"

        signature = generate_signature(total_amount, transaction_uuid, key, product_code)
        self.assertIsInstance(signature, str)
        self.assertTrue(len(signature) > 0)

    def test_generate_signature_missing_params(self):
        with self.assertRaises(ValueError):
            generate_signature("", "1234abcd")
        with self.assertRaises(ValueError):
            generate_signature("1000", "")

if __name__ == "__main__":
    unittest.main()





================================================
File: index.js
================================================
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);



================================================
File: package.json
================================================
{
  "name": "esewa",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@react-navigation/native": "^7.0.15",
    "@react-navigation/native-stack": "^7.2.1",
    "crypto-js": "^4.2.0",
    "expo": "~52.0.37",
    "expo-status-bar": "~2.0.1",
    "react": "18.3.1",
    "react-native": "0.76.7",
    "react-native-safe-area-context": "^5.3.0",
    "react-native-screens": "^4.9.1",
    "react-native-webview": "^13.13.4"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}




================================================
File: src/navigation/AppNavigator.js
================================================
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

// Import screens
import HomeScreen from '../screens/HomeScreen';
import ProductDetailsScreen from '../screens/ProductDetailsScreen';
import PaymentScreen from '../screens/PaymentScreen';
import PaymentSuccessScreen from '../screens/PaymentSuccessScreen';
import PaymentFailureScreen from '../screens/PaymentFailureScreen';

const Stack = createNativeStackNavigator();

const AppNavigator = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen 
          name="Home" 
          component={HomeScreen} 
          options={{ title: 'eSewa Payment Demo' }} 
        />
        <Stack.Screen 
          name="ProductDetails" 
          component={ProductDetailsScreen} 
          options={{ title: 'Product Details' }} 
        />
        <Stack.Screen 
          name="Payment" 
          component={PaymentScreen} 
          options={{ title: 'eSewa Payment' }} 
        />
        <Stack.Screen 
          name="PaymentSuccess" 
          component={PaymentSuccessScreen} 
          options={{ title: 'Payment Successful', headerBackVisible: false }} 
        />
        <Stack.Screen 
          name="PaymentFailure" 
          component={PaymentFailureScreen} 
          options={{ title: 'Payment Failed', headerBackVisible: false }} 
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default AppNavigator; 


================================================
File: src/screens/HomeScreen.js
================================================
import React from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  StyleSheet, 
  TouchableOpacity, 
  Image,
  SafeAreaView
} from 'react-native';

// Sample product data
const products = [
  {
    id: '1',
    name: 'Smartphone',
    price: 25000,
    image: 'https://via.placeholder.com/150',
    description: 'Latest smartphone with high-end features and excellent camera quality.'
  },
  {
    id: '2',
    name: 'Laptop',
    price: 85000,
    image: 'https://via.placeholder.com/150',
    description: 'Powerful laptop for work and gaming with long battery life.'
  },
  {
    id: '3',
    name: 'Headphones',
    price: 3500,
    image: 'https://via.placeholder.com/150',
    description: 'Noise cancelling headphones with superior sound quality.'
  },
  {
    id: '4',
    name: 'Smart Watch',
    price: 12000,
    image: 'https://via.placeholder.com/150',
    description: 'Track your fitness and stay connected with this smart watch.'
  },
];

const HomeScreen = ({ navigation }) => {
  const renderItem = ({ item }) => (
    <TouchableOpacity
      style={styles.productCard}
      onPress={() => navigation.navigate('ProductDetails', { product: item })}
    >
      <Image source={{ uri: item.image }} style={styles.productImage} />
      <View style={styles.productInfo}>
        <Text style={styles.productName}>{item.name}</Text>
        <Text style={styles.productPrice}>Rs. {item.price.toLocaleString()}</Text>
        <Text style={styles.productDescription} numberOfLines={2}>
          {item.description}
        </Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>eSewa Payment Demo</Text>
        <Text style={styles.headerSubtitle}>Select a product to purchase</Text>
      </View>
      <FlatList
        data={products}
        renderItem={renderItem}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.productList}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    padding: 16,
    backgroundColor: '#5cb85c',
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'white',
    textAlign: 'center',
    marginTop: 4,
  },
  productList: {
    padding: 16,
  },
  productCard: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderRadius: 8,
    overflow: 'hidden',
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  productImage: {
    width: 100,
    height: 100,
  },
  productInfo: {
    flex: 1,
    padding: 12,
  },
  productName: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  productPrice: {
    fontSize: 16,
    color: '#5cb85c',
    fontWeight: 'bold',
    marginBottom: 4,
  },
  productDescription: {
    fontSize: 14,
    color: '#666',
  },
});

export default HomeScreen; 


================================================
File: src/screens/PaymentFailureScreen.js
================================================
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
  SafeAreaView,
} from 'react-native';
import { checkPaymentStatus, PRODUCT_CODE } from '../utils/eSewaUtils';

const PaymentFailureScreen = ({ route, navigation }) => {
  const { product, transactionUuid } = route.params;
  const [loading, setLoading] = useState(true);
  const [paymentStatus, setPaymentStatus] = useState(null);
  const [errorMessage, setErrorMessage] = useState('');

  useEffect(() => {
    console.log('Payment failure screen - Transaction UUID:', transactionUuid);
    
    // Check payment status from eSewa API to confirm failure
    const verifyPayment = async () => {
      try {
        const totalAmount = (product.price * 1.13).toString();
        console.log('Checking payment status with:', {
          productCode: PRODUCT_CODE,
          transactionUuid,
          totalAmount
        });
        
        const status = await checkPaymentStatus(
          PRODUCT_CODE,
          transactionUuid,
          totalAmount
        );
        console.log('Payment status response:', status);
        
        if (status.code && status.message) {
          // This is an error response
          setErrorMessage(status.message);
          setPaymentStatus({ status: 'FAILED' });
        } else {
          setPaymentStatus(status);
        }
      } catch (error) {
        console.error('Error checking payment status:', error);
        setErrorMessage('Could not verify payment status');
        setPaymentStatus({ status: 'NOT_FOUND' });
      } finally {
        setLoading(false);
      }
    };

    verifyPayment();
  }, [product, transactionUuid]);

  const handleTryAgain = () => {
    // Navigate back to product details to try payment again
    navigation.navigate('ProductDetails', { product });
  };

  const handleBackToHome = () => {
    navigation.reset({
      index: 0,
      routes: [{ name: 'Home' }],
    });
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#d9534f" />
        <Text style={styles.loadingText}>Checking payment status...</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.contentContainer}>
        <View style={styles.failureIconContainer}>
          <Text style={styles.failureIcon}>✕</Text>
        </View>
        
        <Text style={styles.title}>Payment Failed</Text>
        <Text style={styles.subtitle}>
          Your payment for {product.name} could not be processed.
        </Text>
        
        <View style={styles.card}>
          <Text style={styles.cardTitle}>Transaction Details</Text>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Status:</Text>
            <Text style={[styles.detailValue, { color: '#d9534f' }]}>
              {paymentStatus?.status || 'FAILED'}
            </Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Transaction ID:</Text>
            <Text style={styles.detailValue}>{transactionUuid}</Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Amount:</Text>
            <Text style={styles.detailValue}>
              Rs. {(product.price * 1.13).toLocaleString()}
            </Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Product:</Text>
            <Text style={styles.detailValue}>{product.name}</Text>
          </View>
          
          {errorMessage && (
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Error:</Text>
              <Text style={[styles.detailValue, { color: '#d9534f' }]}>
                {errorMessage}
              </Text>
            </View>
          )}
        </View>
        
        <View style={styles.messageCard}>
          <Text style={styles.messageTitle}>Possible Reasons for Failure:</Text>
          <Text style={styles.messageItem}>• Insufficient balance in eSewa account</Text>
          <Text style={styles.messageItem}>• Transaction timed out</Text>
          <Text style={styles.messageItem}>• Payment was cancelled</Text>
          <Text style={styles.messageItem}>• Technical issue with eSewa service</Text>
          <Text style={styles.messageItem}>• Invalid signature in the request</Text>
        </View>
        
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.tryAgainButton} onPress={handleTryAgain}>
            <Text style={styles.tryAgainButtonText}>Try Again</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.homeButton} onPress={handleBackToHome}>
            <Text style={styles.homeButtonText}>Back to Home</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  contentContainer: {
    padding: 20,
    alignItems: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#333',
  },
  failureIconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#d9534f',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  failureIcon: {
    fontSize: 50,
    color: 'white',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 30,
    textAlign: 'center',
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 20,
    width: '100%',
    marginBottom: 20,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  detailLabel: {
    fontSize: 16,
    color: '#555',
  },
  detailValue: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
  },
  messageCard: {
    backgroundColor: '#f8d7da',
    borderRadius: 8,
    padding: 20,
    width: '100%',
    marginBottom: 30,
  },
  messageTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#721c24',
    marginBottom: 10,
  },
  messageItem: {
    fontSize: 14,
    color: '#721c24',
    marginBottom: 5,
    lineHeight: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  tryAgainButton: {
    backgroundColor: '#5cb85c',
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderRadius: 8,
    flex: 1,
    marginRight: 10,
  },
  tryAgainButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  homeButton: {
    backgroundColor: '#6c757d',
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderRadius: 8,
    flex: 1,
    marginLeft: 10,
  },
  homeButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

export default PaymentFailureScreen; 


================================================
File: src/screens/PaymentScreen.js
================================================
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator } from 'react-native';
import { WebView } from 'react-native-webview';
import { 
  createEsewaPaymentForm, 
  generateTransactionUuid, 
  PRODUCT_CODE 
} from '../utils/eSewaUtils';

const PaymentScreen = ({ route, navigation }) => {
  const { product, taxAmount, totalAmount } = route.params;
  const [loading, setLoading] = useState(true);
  const [paymentHtml, setPaymentHtml] = useState('');
  const [transactionUuid, setTransactionUuid] = useState('');

  useEffect(() => {
    // Generate a unique transaction ID
    const uuid = generateTransactionUuid();
    setTransactionUuid(uuid);

    // Create the payment form HTML
    const paymentDetails = {
      amount: product.price.toString(),
      taxAmount: taxAmount.toString(),
      totalAmount: totalAmount.toString(),
      transactionUuid: uuid,
      productServiceCharge: '0',
      productDeliveryCharge: '0',
      // Use absolute URLs for success and failure
      successUrl: 'https://developer.esewa.com.np/success',
      failureUrl: 'https://developer.esewa.com.np/failure'
    };

    const html = createEsewaPaymentForm(paymentDetails);
    setPaymentHtml(html);
    setLoading(false);
  }, [product, taxAmount, totalAmount]);

  const handleNavigationStateChange = (navState) => {
    // Check if the URL is the success or failure URL
    const { url } = navState;
    console.log('Navigation state changed:', url);

    if (url.includes('developer.esewa.com.np/success')) {
      // Extract the response data from the URL
      const responseData = extractResponseData(url);
      console.log('Success response data:', responseData);
      
      // Navigate to success screen with the response data
      navigation.replace('PaymentSuccess', { 
        product, 
        transactionUuid,
        responseData 
      });
    } else if (url.includes('developer.esewa.com.np/failure')) {
      console.log('Payment failed');
      // Navigate to failure screen
      navigation.replace('PaymentFailure', { 
        product, 
        transactionUuid 
      });
    }
  };

  // Helper function to extract response data from URL
  const extractResponseData = (url) => {
    try {
      // The response is in the query parameter as base64 encoded JSON
      const urlObj = new URL(url);
      const base64Data = urlObj.searchParams.get('data');
      
      if (base64Data) {
        // Decode base64 to get the JSON string
        const jsonString = atob(base64Data);
        // Parse the JSON string to get the response object
        return JSON.parse(jsonString);
      }
    } catch (error) {
      console.error('Error extracting response data:', error);
    }
    
    // Return a default response if extraction fails
    return {
      status: 'COMPLETE',
      transaction_uuid: transactionUuid,
      product_code: PRODUCT_CODE,
      total_amount: totalAmount.toString()
    };
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#5cb85c" />
        <Text style={styles.loadingText}>Preparing payment...</Text>
      </View>
    );
  }

  return (
    <WebView
      source={{ html: paymentHtml }}
      onNavigationStateChange={handleNavigationStateChange}
      startInLoadingState={true}
      javaScriptEnabled={true}
      domStorageEnabled={true}
      renderLoading={() => (
        <View style={styles.webviewLoading}>
          <ActivityIndicator size="large" color="#5cb85c" />
          <Text style={styles.loadingText}>Loading eSewa payment...</Text>
        </View>
      )}
    />
  );
};

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
  webviewLoading: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#333',
  },
});

export default PaymentScreen; 


================================================
File: src/screens/PaymentSuccessScreen.js
================================================
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
  SafeAreaView,
} from 'react-native';
import { checkPaymentStatus, PRODUCT_CODE, verifySignature } from '../utils/eSewaUtils';

const PaymentSuccessScreen = ({ route, navigation }) => {
  const { product, transactionUuid, responseData } = route.params;
  const [loading, setLoading] = useState(true);
  const [paymentStatus, setPaymentStatus] = useState(null);
  const [verificationResult, setVerificationResult] = useState(null);

  useEffect(() => {
    // Log the response data for debugging
    console.log('Response data in success screen:', responseData);
    
    // Verify the signature from the response if available
    let isSignatureValid = false;
    if (responseData && responseData.signature) {
      try {
        isSignatureValid = verifySignature(responseData);
        console.log('Signature verification result:', isSignatureValid);
      } catch (error) {
        console.error('Error verifying signature:', error);
      }
    }
    setVerificationResult(isSignatureValid);

    // Check payment status from eSewa API
    const verifyPayment = async () => {
      try {
        const totalAmount = responseData?.total_amount || (product.price * 1.13).toString();
        console.log('Checking payment status with:', {
          productCode: PRODUCT_CODE,
          transactionUuid,
          totalAmount
        });
        
        const status = await checkPaymentStatus(
          PRODUCT_CODE,
          transactionUuid,
          totalAmount
        );
        console.log('Payment status response:', status);
        setPaymentStatus(status);
      } catch (error) {
        console.error('Error checking payment status:', error);
        // Use response data as fallback if API call fails
        setPaymentStatus(responseData || { status: 'UNKNOWN' });
      } finally {
        setLoading(false);
      }
    };

    verifyPayment();
  }, [product, transactionUuid, responseData]);

  const handleBackToHome = () => {
    navigation.reset({
      index: 0,
      routes: [{ name: 'Home' }],
    });
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#5cb85c" />
        <Text style={styles.loadingText}>Verifying payment...</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.contentContainer}>
        <View style={styles.successIconContainer}>
          <Text style={styles.successIcon}>✓</Text>
        </View>
        
        <Text style={styles.title}>Payment Successful!</Text>
        <Text style={styles.subtitle}>
          Your payment for {product.name} has been processed successfully.
        </Text>
        
        <View style={styles.card}>
          <Text style={styles.cardTitle}>Transaction Details</Text>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Status:</Text>
            <Text style={[
              styles.detailValue, 
              { color: paymentStatus?.status === 'COMPLETE' ? '#5cb85c' : '#f0ad4e' }
            ]}>
              {paymentStatus?.status || 'COMPLETE'}
            </Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Transaction ID:</Text>
            <Text style={styles.detailValue}>{transactionUuid}</Text>
          </View>
          
          {paymentStatus?.ref_id && (
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Reference ID:</Text>
              <Text style={styles.detailValue}>{paymentStatus.ref_id}</Text>
            </View>
          )}
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Amount:</Text>
            <Text style={styles.detailValue}>
              Rs. {parseFloat(paymentStatus?.total_amount || (product.price * 1.13)).toLocaleString()}
            </Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Product:</Text>
            <Text style={styles.detailValue}>{product.name}</Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Signature Verification:</Text>
            <Text style={[
              styles.detailValue, 
              { color: verificationResult ? '#5cb85c' : '#d9534f' }
            ]}>
              {verificationResult ? 'Valid' : 'Not Verified'}
            </Text>
          </View>
        </View>
        
        <TouchableOpacity style={styles.button} onPress={handleBackToHome}>
          <Text style={styles.buttonText}>Back to Home</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  contentContainer: {
    padding: 20,
    alignItems: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#333',
  },
  successIconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#5cb85c',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  successIcon: {
    fontSize: 50,
    color: 'white',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 30,
    textAlign: 'center',
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 20,
    width: '100%',
    marginBottom: 30,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  detailLabel: {
    fontSize: 16,
    color: '#555',
  },
  detailValue: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
  },
  button: {
    backgroundColor: '#5cb85c',
    paddingVertical: 14,
    paddingHorizontal: 30,
    borderRadius: 8,
    width: '100%',
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

export default PaymentSuccessScreen; 


================================================
File: src/screens/ProductDetailsScreen.js
================================================
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
} from 'react-native';

const ProductDetailsScreen = ({ route, navigation }) => {
  const { product } = route.params;

  // Calculate tax (13% VAT)
  const taxAmount = product.price * 0.13;
  const totalAmount = product.price + taxAmount;

  const handleBuyNow = () => {
    navigation.navigate('Payment', {
      product,
      taxAmount,
      totalAmount,
    });
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView>
        <Image source={{ uri: product.image }} style={styles.productImage} />
        
        <View style={styles.productInfo}>
          <Text style={styles.productName}>{product.name}</Text>
          <Text style={styles.productPrice}>Rs. {product.price.toLocaleString()}</Text>
          <Text style={styles.productDescription}>{product.description}</Text>
        </View>
        
        <View style={styles.priceBreakdown}>
          <Text style={styles.breakdownTitle}>Price Breakdown</Text>
          
          <View style={styles.breakdownRow}>
            <Text style={styles.breakdownLabel}>Product Price:</Text>
            <Text style={styles.breakdownValue}>Rs. {product.price.toLocaleString()}</Text>
          </View>
          
          <View style={styles.breakdownRow}>
            <Text style={styles.breakdownLabel}>VAT (13%):</Text>
            <Text style={styles.breakdownValue}>Rs. {taxAmount.toLocaleString()}</Text>
          </View>
          
          <View style={[styles.breakdownRow, styles.totalRow]}>
            <Text style={[styles.breakdownLabel, styles.totalLabel]}>Total:</Text>
            <Text style={[styles.breakdownValue, styles.totalValue]}>
              Rs. {totalAmount.toLocaleString()}
            </Text>
          </View>
        </View>
      </ScrollView>
      
      <View style={styles.footer}>
        <TouchableOpacity style={styles.buyButton} onPress={handleBuyNow}>
          <Text style={styles.buyButtonText}>Buy Now with eSewa</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  productImage: {
    width: '100%',
    height: 250,
    resizeMode: 'cover',
  },
  productInfo: {
    padding: 16,
    backgroundColor: 'white',
    marginBottom: 16,
  },
  productName: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  productPrice: {
    fontSize: 20,
    color: '#5cb85c',
    fontWeight: 'bold',
    marginBottom: 12,
  },
  productDescription: {
    fontSize: 16,
    color: '#333',
    lineHeight: 24,
  },
  priceBreakdown: {
    padding: 16,
    backgroundColor: 'white',
    marginBottom: 80, // Add space for the footer
  },
  breakdownTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 12,
  },
  breakdownRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  breakdownLabel: {
    fontSize: 16,
    color: '#555',
  },
  breakdownValue: {
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  totalRow: {
    marginTop: 8,
    borderBottomWidth: 0,
  },
  totalLabel: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  totalValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#5cb85c',
  },
  footer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'white',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#eee',
  },
  buyButton: {
    backgroundColor: '#5cb85c',
    paddingVertical: 14,
    borderRadius: 8,
    alignItems: 'center',
  },
  buyButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default ProductDetailsScreen; 


================================================
File: src/utils/eSewaUtils.js
================================================
import CryptoJS from 'crypto-js';

// Secret key for UAT (testing) environment
// Updated to match the Django implementation
const SECRET_KEY = '8gBm/:&EnhH.1/q';

// eSewa API URLs
export const ESEWA_EPAY_URL = 'https://rc-epay.esewa.com.np/api/epay/main/v2/form';
export const ESEWA_STATUS_URL = 'https://rc.esewa.com.np/api/epay/transaction/status/';

// Product code for testing
export const PRODUCT_CODE = 'EPAYTEST';

/**
 * Generate HMAC SHA256 signature for eSewa payment
 * @param {string} totalAmount - Total payment amount
 * @param {string} transactionUuid - Unique transaction ID
 * @param {string} productCode - Product code provided by eSewa
 * @returns {string} - Base64 encoded HMAC signature
 */
export const generateSignature = (totalAmount, transactionUuid, productCode) => {
  // Based on the Django implementation, the input string should be:
  // "total_amount=100,transaction_uuid=11-201-13,product_code=EPAYTEST"
  // NOT "total_amount=100,transaction_uuid=11-201-13,product_code=EPAYTEST"
  
  const inputString = `total_amount=${totalAmount},transaction_uuid=${transactionUuid},product_code=${productCode}`;
  
  // Generate HMAC SHA256 hash and convert to Base64
  // Make sure we're using the correct key format - the Django implementation uses the raw key
  const hash = CryptoJS.HmacSHA256(inputString, SECRET_KEY);
  const hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
  
  return hashInBase64;
};

/**
 * Generate a unique transaction ID
 * @returns {string} - Transaction UUID in format YYMMDD-HHMMSS
 */
export const generateTransactionUuid = () => {
  const now = new Date();
  const year = now.getFullYear().toString().slice(-2);
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  
  return `${year}${month}${day}-${hours}${minutes}${seconds}`;
};

/**
 * Verify the signature from eSewa response
 * @param {Object} response - Response from eSewa
 * @returns {boolean} - Whether the signature is valid
 */
export const verifySignature = (response) => {
  const { 
    transaction_code, 
    status, 
    total_amount, 
    transaction_uuid, 
    product_code, 
    signed_field_names,
    signature 
  } = response;
  
  // Get the fields to sign from signed_field_names
  const fieldsToSign = signed_field_names.split(',');
  
  // Create input string for signature verification
  // Based on the Django implementation, we need to use the format:
  // "field1=value1,field2=value2,field3=value3"
  const inputString = fieldsToSign.map(field => `${field}=${response[field]}`).join(',');
  
  // Generate signature
  const hash = CryptoJS.HmacSHA256(inputString, SECRET_KEY);
  const calculatedSignature = CryptoJS.enc.Base64.stringify(hash);
  
  // Compare signatures
  return signature === calculatedSignature;
};

/**
 * Create HTML form for eSewa payment
 * @param {Object} paymentDetails - Payment details
 * @returns {string} - HTML form for eSewa payment
 */
export const createEsewaPaymentForm = (paymentDetails) => {
  const {
    amount,
    taxAmount,
    totalAmount,
    transactionUuid,
    productServiceCharge,
    productDeliveryCharge,
    successUrl,
    failureUrl
  } = paymentDetails;
  
  // Generate signature
  const signature = generateSignature(totalAmount, transactionUuid, PRODUCT_CODE);
  
  // Create HTML form
  return `
    <html>
      <head>
        <title>eSewa Payment</title>
      </head>
      <body onload="document.eSewaForm.submit()">
        <form name="eSewaForm" action="${ESEWA_EPAY_URL}" method="POST">
          <input type="hidden" name="amount" value="${amount}">
          <input type="hidden" name="tax_amount" value="${taxAmount}">
          <input type="hidden" name="total_amount" value="${totalAmount}">
          <input type="hidden" name="transaction_uuid" value="${transactionUuid}">
          <input type="hidden" name="product_code" value="${PRODUCT_CODE}">
          <input type="hidden" name="product_service_charge" value="${productServiceCharge}">
          <input type="hidden" name="product_delivery_charge" value="${productDeliveryCharge}">
          <input type="hidden" name="success_url" value="${successUrl}">
          <input type="hidden" name="failure_url" value="${failureUrl}">
          <input type="hidden" name="signed_field_names" value="total_amount,transaction_uuid,product_code">
          <input type="hidden" name="signature" value="${signature}">
        </form>
        <div style="text-align: center; margin-top: 50px;">
          <h2>Redirecting to eSewa Payment...</h2>
          <p>Please wait while we redirect you to eSewa payment gateway.</p>
        </div>
      </body>
    </html>
  `;
};

/**
 * Check payment status
 * @param {string} productCode - Product code
 * @param {string} transactionUuid - Transaction UUID
 * @param {string} totalAmount - Total amount
 * @returns {Promise} - Promise that resolves to payment status
 */
export const checkPaymentStatus = async (productCode, transactionUuid, totalAmount) => {
  try {
    const url = `${ESEWA_STATUS_URL}?product_code=${productCode}&total_amount=${totalAmount}&transaction_uuid=${transactionUuid}`;
    const response = await fetch(url);
    return await response.json();
  } catch (error) {
    console.error('Error checking payment status:', error);
    throw error;
  }
}; 

